name: Build Cross-Platform Python App

on:
  push:
    branches:
      - main
    paths-ignore:
      - "**.md"
      - ".gitignore"
      - "docs/**"
  pull_request:
    branches:
      - main
    paths-ignore:
      - "**.md"
      - ".gitignore"
      - "docs/**"

env:
  PYTHON_VERSION: "3.11"
  APP_NAME: "KingGodCastleAIO"

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            artifact_name: linux
            executable_suffix: ""
          - os: windows-latest
            platform: windows
            artifact_name: windows
            executable_suffix: ".exe"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Get version from git tag or branch
        id: get_version
        shell: bash
        run: |
          # Try to get version from git tag first
          if git describe --tags --exact-match HEAD 2>/dev/null; then
            VERSION=$(git describe --tags --exact-match HEAD | sed 's/^v//')
          else
            # Fallback to branch name
            BRANCH_NAME="${GITHUB_REF##*/}"
            VERSION="${BRANCH_NAME#v}"
            # If no version found, use timestamp
            if [ "$VERSION" = "main" ] || [ -z "$VERSION" ]; then
              VERSION="dev-$(date +'%Y%m%d%H%M%S')"
            fi
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Run tests (if available)
        continue-on-error: true
        run: |
          if [ -f "test_requirements.txt" ]; then
            pip install -r test_requirements.txt
          fi
          if [ -f "tests/" ] && [ -n "$(ls tests/*.py 2>/dev/null)" ]; then
            python -m pytest tests/ || echo "Tests failed but continuing build"
          fi
        shell: bash

      - name: Build with PyInstaller (Cross-platform)
        shell: bash
        run: |
          pyinstaller --onefile \
            --name "${{ env.APP_NAME }}-${{ steps.get_version.outputs.version }}${{ matrix.executable_suffix }}" \
            --clean \
            --noconfirm \
            main.py

      - name: Verify build output
        shell: bash
        run: |
          ls -la dist/
          if [ "${{ matrix.platform }}" = "linux" ]; then
            file dist/*
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}-${{ steps.get_version.outputs.version }}
          path: dist/*
          retention-days: 30
          if-no-files-found: error

  # Job để chuẩn bị metadata cho release
  prepare-release:
    runs-on: ubuntu-latest
    needs: build
    outputs:
      version: ${{ steps.version.outputs.version }}
      should_release: ${{ steps.check.outputs.should_release }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version
        id: version
        run: |
          if git describe --tags --exact-match HEAD 2>/dev/null; then
            VERSION=$(git describe --tags --exact-match HEAD | sed 's/^v//')
            echo "should_release=true" >> $GITHUB_OUTPUT
          else
            BRANCH_NAME="${GITHUB_REF##*/}"
            VERSION="${BRANCH_NAME#v}"
            if [ "$VERSION" = "main" ] || [ -z "$VERSION" ]; then
              VERSION="dev-$(date +'%Y%m%d%H%M%S')"
            fi
            echo "should_release=false" >> $GITHUB_OUTPUT
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Check if should release
        id: check
        run: |
          if [ "${{ github.event_name }}" = "push" ] && [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "should_release=true" >> $GITHUB_OUTPUT
          else
            echo "should_release=false" >> $GITHUB_OUTPUT
          fi
